local __GRUB_START_TIME = nil
local __GRUB_COUNTDOWN_TIME = 15
local __GRUB_TIME_LEFT = __GRUB_COUNTDOWN_TIME
local __GRUB_RUN_TIME = nil -- calculated as os.clock - __GRUB_START_TIME
function loadAPI(path) -- Thanks to theoriginalbit for this loadAPI replacer
  local name=string.match(fs.getName(path),"(%a+)%.?.-")
  local env=setmetatable({shell=shell},{__index=_G})
  local func,err=loadfile(path)
  if not func then
    return false,printError(err)
  end
  setfenv(func,env)
  func()
  local api={}
  for k,v in pairs(env) do
    api[k]=v
  end
  _G[name]=api
  return true
end
local __tempPEStorage=os.pullEvent
os.pullEvent=os.pullEventRaw
local h,w=term.getSize()
loadAPI(shell.dir()..'lgrub.sys/api/lgrub.lua')
loadAPI(shell.dir()..'lgrub.sys/api/Drawing.lua') -- Thank you, Oeed!
--loadAPI(shell.dir()..'lgrub.sys/api/wrappedFS.lua')
--fs = wrappedFS
lgrub.init(shell)
Drawing.Clear()
Drawing.DrawArea(1, 1, Drawing.Screen.Width, 1, ' ', colors.lightGray, colors.lightGray)
Drawing.DrawCharactersCenter(nil, 1, nil, 1, 'LuaGrub v'..lgrub.version, colors.black, colors.lightGray)
Drawing.DrawBuffer()
function grub_evnt()
  while true do
    os.queueEvent("GRUBNULLEVENT")
    sleep(.1)
  end
end
local function grub_countdown(e)
  if __GRUB_TIME_LEFT=='infinity' then return end
  __GRUB_RUN_TIME=os.clock()-__GRUB_START_TIME
  if e=='key' then
    __GRUB_TIME_LEFT='infinity'
  else
  	__GRUB_TIME_LEFT=math.floor(__GRUB_COUNTDOWN_TIME-__GRUB_RUN_TIME)
  end
end
local function grub_selector()
  local tOS=lgrub.listOSes()
  local nTermX,nTermY=term.getSize()
  local sSeparator=(" "):rep(nTermX)
  local continue=true
  local nSelection=1
  __GRUB_START_TIME=os.clock()
  grub_countdown('sleep')
  while continue do
    Drawing.DrawArea(1,1,Drawing.Screen.Width,1,' ',colors.lightGray,colors.lightGray)
    Drawing.DrawCharactersCenter(nil,1,nil,1,'LuaGrub v'..lgrub.version,colors.black,colors.lightGray)
    Drawing.DrawArea(1,Drawing.Screen.Height,Drawing.Screen.Width,1,' ',colors.lightGray,colors.lightGray)
    Drawing.DrawCharactersCenter(nil,Drawing.Screen.Height,nil,1,__GRUB_TIME_LEFT..' seconds left to decide',colors.black,colors.lightGray)
    for nLine=1,#tOS do
      local sLine=" "
      local fgColor=colors.white
      if nSelection==nLine then
        sLine=">"
        fgColor=colors.yellow
      end
      sLine=sLine..tOS[nLine][1]
      Drawing.WriteStringToBuffer(2,nLine+1,sLine,fgColor,colors.black)
    end
    coroutine.yield()
    local sEvent,nKey=__tempPEStorage()
    Drawing.DrawBuffer()
    if sEvent=='key' then
      grub_countdown('key')
      if nKey==200 or nKey==17 then
        if tOS[nSelection-1] then
          nSelection=nSelection-1
        else
          nSelection=#tOS
        end
      elseif nKey==208 or nKey==31  then
        if tOS[nSelection+1] then
          nSelection=nSelection+1
        else
          nSelection=1
        end
      elseif nKey==28 then
        if tOS[nSelection][2] then
          continue=false
        else
          error("Error: Selection out of bounds: "..nSelection..'/'..#tOS)
        end
      end
    else
      grub_countdown('sleep')
    end
    if __GRUB_TIME_LEFT==0 then
      lgrub.prepForRun(tOS[nSelection][2])
      return
    end
  end
  lgrub.prepForRun(tOS[nSelection][2])
end
parallel.waitForAny(grub_selector,grub_evnt)
local __osPath=lgrub.getPrepped()
local __continue=true
while __continue do
  __continue=false
  if __osPath=='CraftOS' then
    term.clear()
    return
  end
  if __osPath=='Shutdown' then
    os.shutdown()
  end
  os.pullEvent=__tempPEStorage
  lgrub.run(__osPath..'/startup')
  os.pullEvent=os.pullEventRaw
  if lgrub.goAgain() then
    __osPath=lgrub.newOS
    __continue=true
    lgrub.done()
  end
end
os.shutdown()