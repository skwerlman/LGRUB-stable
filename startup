local __tempPEStorage = os.pullEvent
os.pullEvent = os.pullEventRaw -- Prevent ctrl-T
local h, w = term.getSize()
os.loadAPI(shell.dir()..'lgrub.sys/api/lgrub.lua') -- an interface that allows OSes to list other OSes by name, and also what we use here.
os.loadAPI(shell.dir()..'lgrub.sys/api/Drawing.lua') -- Oeed's drawing API
--os.loadAPI(shell.dir()..'lgrub.sys/api/wrappedFS.lua') -- forces relative paths (hopefully)
--fs = wrappedFS -- Replace the standard fs with wrappedFS
-- ^^ Not yet functional, but planned
lgrub.init(shell)

local function grub_countdown()
  for i=1, 10 do
    sleep(1)
  end
end

local function grub_selector()
  local tOS = lgrub.listOSes()
  local tOSes, tPaths
  for n, osData in ipairs(tOS) do
    tOSes[n] = osData[1]
    tPaths[n] = osData[2]
  end
  table.insert(tOSes, 'Shutdown')
  local nTermX, nTermY = term.getSize()
  local sSeperator = (" "):rep(nTermX) -- Create a separator string with the size of the terminal
  local function printColor(text, fg, bg)
    term.setBackgroundColor(bg)
    term.setTextColor(fg)
    print(text)
  end
  table.insert(tChoices, 'Shutdown')
  local continue = true
  local nSelection = 0 -- The current selection defaults at 0
  while continue do
    term.setCursorPos(1, 1)
    term.clear()
    Drawing.DrawCharactersCenter(nil, 1, nil, nil, 'LuaGrub v'..lgrub.version)
    printColor("", colors.black, colors.lightGray)
    printColor(sSeperator, colors.lightGray, colors.lightGray)
    for nLine = 0, #tOSes do
      local sLine = " "
      local fgColor = colors.white
      if nSelection == nLine then
        sLine = ">"
        fgColor = colors.yellow
      end
      sLine = sLine .. " " .. tOSes[nLine]
      printColor(sLine, fgColor, colors.black)
    end
    local sEvent, nKey = os.pullEvent("key")
    if nKey == 200 or nKey == 17 then
      if tOSes[nSelection - 1] then
        nSelection = nSelection - 1
      else
        nSelection = #tOSes
      end
    elseif nKey == 208 or nKey == 31  then
      if tOSes[nSelection + 1] then
        nSelection = nSelection + 1
      else
        nSelection = 1
      end
    elseif nKey == 28 then
      if tPaths[nSelection] then
        continue = false
      else
        printError("Error: Selection out of bounds: ", nSelection)
        nSelection = 1
      end
    end
  end
  return tPaths[nSelection]
end

local __osName = parallel.waitForAny(grub_countdown, grub_selector) -- Wait up to ten seconds for user input, or use the first OS found, alphabetically

local __continue = true
while __continue do
  __continue = false -- default is to shutdown after os ends, if they haven't already
  if __osName == 'CraftOS' then -- enable CraftOS support; not a boot option, must be enabled by OS
    term.clear()
    return -- end now, but without shutdown
  end
  if __osName == 'Shutdown' then -- force immediate power down
    os.shutdown()
  end
  os.pullEvent = __tempPEStorage -- Restore os.pullEvent to prevent possible conflicts
  lgrub.run(__osName)
  os.pullEvent = os.pullEventRaw -- Prevent ctrl-t again
  if lgrub.goAgain then
    __osName = lgrub.newOS
    __continue = true
    lgrub.done()
  end
end
os.shutdown() -- This is always skipped for CraftOS, and usually won't be run ever, unless the OS forgets to power down. This helps prevent hacking/mistakes.
